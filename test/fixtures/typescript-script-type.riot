<random>
  <h3>{ props.title }</h3>

  <button onclick={ generate }>
    Generate
  </button>

  <h1>
    { state.number }
  </h1>

  <script lang="ts">
    type State = {
      number: number;
      logs: { text: string }[];
    }

    interface RandomComponent {
      state: State,
      generate: (event: MouseEvent) => boolean;
      clearLogs: (filter: Record<string, string | number>) => void;
    }

    function Random(): RandomComponent {
      return {
        state: {
          number: null,
          logs: []
        },

        generate(event: MouseEvent): boolean {
          // Type casting (https://github.com/riot/riot/issues/2926)
          const pointerEvent = new PointerEvent('pointerenter') as MouseEvent;

          this.update({
            number: Math.floor(Math.random() * 10000),
            logs: this.state.logs.concat({
              text: `Generate button clicked. Event type is ${event.type}`
            })
          })

          return true;
        },

        clearLogs(filter = { error: 0 }) {
          this.update({
            logs: []
          })
        }
      }
    }

    export default Random
  </script>
</random>
